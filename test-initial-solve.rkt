
#lang racket

(require "datalog.rkt")
(require "naive.rkt")
(require "semi-naive.rkt")
(require "incremental.rkt")

(define tests 0)
(define errors 0)

(define (report-error solver P E I S)
  (set! errors (add1 errors))
  (printf "error ~a ~a\nP ~a\nE ~a\nI ~a\nS ~a\n\n" solver tests P E (sort-tuples (set-union E I)) (sort-tuples S)))

(define (test P E I)
  (set! tests (add1 tests))
  (define expected (set-union E I))
  (define Sn (solver-result-tuples (solve-naive P E)))
  (define Ssn (solver-result-tuples (solve-semi-naive P E)))
  (define Si (solver-result-tuples (solve-incremental P E)))

  (unless (equal? expected Sn)
    (report-error 'naive P E I Sn))

  (unless (equal? expected Ssn)
    (report-error 'semi-naive P E I Ssn))

  (unless (equal? expected Si)
    (report-error 'incremental P E I Si)))

(define r1 (:- #(Reachable x y)   #(Link x y)))
(define r2 (:- #(Reachable x y)   #(Link x z) #(Reachable z y)))
(define r3 (:- #(Node x)          #(Link x y)))
(define r4 (:- #(Node y)          #(Link x y)))
(define r5 (:- #(Unreachable x y) #(Node x) #(Node y) (Â¬ #(Reachable x y))))

(test (set r1 r2)
      (set #(Link 'a 'b) #(Link 'b 'c))
      (set #(Reachable 'a 'b) #(Reachable 'b 'c) #(Reachable 'a 'c)))
(test (set r1 r2)
      (set #(Link 'a 'b) #(Link 'b 'c) #(Link 'c 'c)) 
      (set #(Reachable 'a 'b) #(Reachable 'b 'c) #(Reachable 'a 'c) #(Reachable 'c 'c)))
(test (set r1 r2)
      (set #(Link 'a 'b) #(Link 'b 'c) #(Link 'c 'c)  #(Link 'c 'd)) 
      (set #(Reachable 'a 'b) #(Reachable 'b 'c) #(Reachable 'a 'c) #(Reachable 'c 'c) #(Reachable 'c 'd) #(Reachable 'b 'd) #(Reachable 'a 'd)))

(test (set r1 r2 r3 r4)
      (set #(Link 'a 'b) #(Link 'b 'c))
      (set #(Reachable 'a 'b) #(Reachable 'b 'c) #(Reachable 'a 'c)
        #(Node 'a) #(Node 'b) #(Node 'c)))
(test (set r1 r2 r3 r4)
      (set #(Link 'a 'b) #(Link 'b 'c) #(Link 'c 'c)) 
      (set #(Reachable 'a 'b) #(Reachable 'b 'c) #(Reachable 'a 'c) #(Reachable 'c 'c)
        #(Node 'a) #(Node 'b) #(Node 'c)))
(test (set r1 r2 r3 r4)
      (set #(Link 'a 'b) #(Link 'b 'c) #(Link 'c 'c)  #(Link 'c 'd)) 
      (set #(Reachable 'a 'b) #(Reachable 'b 'c) #(Reachable 'a 'c) #(Reachable 'c 'c) #(Reachable 'c 'd) #(Reachable 'b 'd) #(Reachable 'a 'd)
        #(Node 'a) #(Node 'b) #(Node 'c) #(Node 'd)))

(test (set r1 r2 r3 r4 r5)
      (set #(Link 'a 'b) #(Link 'b 'c))
      (set #(Reachable 'a 'b) #(Reachable 'b 'c) #(Reachable 'a 'c)
        #(Node 'a) #(Node 'b) #(Node 'c)
        #(Unreachable 'a 'a) #(Unreachable 'b 'a) #(Unreachable 'b 'b) #(Unreachable 'c 'a) #(Unreachable 'c 'b) #(Unreachable 'c 'c)))
(test (set r1 r2 r3 r4 r5)
      (set #(Link 'a 'b) #(Link 'b 'c) #(Link 'c 'c)) 
      (set #(Reachable 'a 'b) #(Reachable 'b 'c) #(Reachable 'a 'c) #(Reachable 'c 'c)
        #(Node 'a) #(Node 'b) #(Node 'c)
        #(Unreachable 'a 'a) #(Unreachable 'b 'a) #(Unreachable 'b 'b) #(Unreachable 'c 'a) #(Unreachable 'c 'b)))
(test (set r1 r2 r3 r4 r5)
      (set #(Link 'a 'b) #(Link 'b 'c) #(Link 'c 'c)  #(Link 'c 'd)) 
      (set #(Reachable 'a 'b) #(Reachable 'b 'c) #(Reachable 'a 'c) #(Reachable 'c 'c) #(Reachable 'c 'd) #(Reachable 'b 'd) #(Reachable 'a 'd)
        #(Node 'a) #(Node 'b) #(Node 'c) #(Node 'd)
        #(Unreachable 'a 'a) #(Unreachable 'b 'a) #(Unreachable 'b 'b) #(Unreachable 'c 'a) #(Unreachable 'c 'b) #(Unreachable 'd 'd)
          #(Unreachable 'd 'c) #(Unreachable 'd 'b) #(Unreachable 'd 'a)))
(test (set r1 r2 r3 r4 r5)
      (set #(Link 'a 'b) #(Link 'b 'c) #(Link 'c 'c)  #(Link 'c 'd) #(Link 'c 'b)) 
      (set #(Reachable 'a 'b) #(Reachable 'b 'c) #(Reachable 'a 'c) #(Reachable 'c 'c) #(Reachable 'c 'd) #(Reachable 'b 'd) #(Reachable 'a 'd)
        #(Reachable 'c 'b) #(Reachable 'b 'b)
        #(Node 'a) #(Node 'b) #(Node 'c) #(Node 'd)
        #(Unreachable 'a 'a) #(Unreachable 'b 'a) #(Unreachable 'c 'a)  #(Unreachable 'd 'd)
          #(Unreachable 'd 'c) #(Unreachable 'd 'b) #(Unreachable 'd 'a)))


(printf "\n\nERRORS: ~a\n\n" errors)  
